/*
Deployment script for StudyHubMSQL

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "StudyHubMSQL"
:setvar DefaultFilePrefix "StudyHubMSQL"
:setvar DefaultDataPath "C:\Users\Joel\AppData\Local\Microsoft\VisualStudio\SSDT\v11.0\StudyHubMSQL\"
:setvar DefaultLogPath "C:\Users\Joel\AppData\Local\Microsoft\VisualStudio\SSDT\v11.0\StudyHubMSQL\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping CK__User__UserType__29572725...';


GO
ALTER TABLE [dbo].[User] DROP CONSTRAINT [CK__User__UserType__29572725];


GO
PRINT N'Creating FK_Tutorial_Speciality...';


GO
ALTER TABLE [dbo].[Tutorial] WITH NOCHECK
    ADD CONSTRAINT [FK_Tutorial_Speciality] FOREIGN KEY ([SpecialityId]) REFERENCES [dbo].[Speciality] ([SpecialityId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_Tutorial_User...';


GO
ALTER TABLE [dbo].[Tutorial] WITH NOCHECK
    ADD CONSTRAINT [FK_Tutorial_User] FOREIGN KEY ([userId]) REFERENCES [dbo].[User] ([UserId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_UserSpeciality_Speciality...';


GO
ALTER TABLE [dbo].[UserSpeciality] WITH NOCHECK
    ADD CONSTRAINT [FK_UserSpeciality_Speciality] FOREIGN KEY ([SpecialityId]) REFERENCES [dbo].[Speciality] ([SpecialityId]);


GO
PRINT N'Creating FK_UserSpeciality_User...';


GO
ALTER TABLE [dbo].[UserSpeciality] WITH NOCHECK
    ADD CONSTRAINT [FK_UserSpeciality_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating Check Constraint on [dbo].[User]....';


GO
ALTER TABLE [dbo].[User] WITH NOCHECK
    ADD CHECK (UserType IN ('Tutor','Student','Tutoring Center'));


GO
 /*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
MERGE INTO  Country AS Target  USING ( VALUES (1, 'NIGERIA') ) AS Source (CountryId, CountryName) ON Target.CountryId = Source.CountryId 
 WHEN MATCHED THEN UPDATE SET CountryName = Source.CountryName  WHEN NOT MATCHED BY TARGET THEN INSERT (CountryName) VALUES (CountryName) WHEN NOT MATCHED BY SOURCE THEN 
DELETE;

MERGE INTO  Speciality AS Target  USING ( VALUES (1, 'Agricultural Science'),(2, 'Physics'),(3, 'Biology'),(4, 'Mathematics') ) AS Source (SpecialityId, SpecialityName) ON 
Target.SpecialityId = Source.SpecialityId WHEN MATCHED THEN UPDATE SET SpecialityName = Source.SpecialityName  WHEN NOT MATCHED BY TARGET THEN INSERT (SpecialityName)
 VALUES (SpecialityName) WHEN NOT MATCHED BY SOURCE THEN DELETE;

 MERGE INTO  [State] AS Target  USING ( VALUES (1, 'Federal Capital Territory', 1),(2, 'Ebonyi State', 1),(3, 'Ogun State', 1),(4, 'Ekiti State', 1) ) AS Source 
 (StateId, StateName, CountryId) ON Target.StateId = Source.StateId WHEN MATCHED THEN UPDATE SET StateName = Source.StateName, CountryId = Source.CountryId  
 WHEN NOT MATCHED BY TARGET THEN INSERT (StateName, CountryId) VALUES (StateName, CountryId) WHEN NOT MATCHED BY SOURCE THEN DELETE;

  MERGE INTO  [Town] AS Target  USING ( VALUES (1, 'Abuja', 1),(2, 'Abakaliki', 2),(3, 'Abeokuta', 3),(4, 'Ado-Ekiti', 4) ) AS Source 
 (TownId, TownName, StateId) ON Target.TownId = Source.TownId WHEN MATCHED THEN UPDATE SET TownName = Source.TownName, StateId = Source.StateId  
 WHEN NOT MATCHED BY TARGET THEN INSERT (TownName, StateId) VALUES (TownName, StateId) WHEN NOT MATCHED BY SOURCE THEN DELETE;
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Tutorial] WITH CHECK CHECK CONSTRAINT [FK_Tutorial_Speciality];

ALTER TABLE [dbo].[Tutorial] WITH CHECK CHECK CONSTRAINT [FK_Tutorial_User];

ALTER TABLE [dbo].[UserSpeciality] WITH CHECK CHECK CONSTRAINT [FK_UserSpeciality_Speciality];

ALTER TABLE [dbo].[UserSpeciality] WITH CHECK CHECK CONSTRAINT [FK_UserSpeciality_User];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;


GO
DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.User'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint:' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occured while verifying constraints', 16, 127);
    END


GO
SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
